pipeline {
    agent any

    tools {
        maven "maven363"
    }
    environment {
    	WORKDIR = "./spring-boot-samples/spring-boot-sample-web-ui"
        NEXUS_VERSION = 'nexus3'
        NEXUS_PROTOCOL = 'http'
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "GrW"
        NEXUS_CREDENTIAL_ID = "6f6c7b81-b8ac-4229-a669-fd7701a03500"
        ARTIFACTTPATH = "./spring-boot-samples/spring-boot-sample-web-ui/target/spring-boot-sample-web-ui-2.1.16.BUILD-SNAPSHOT.jar"
    }
	stages {
		stage('SCM checkout') {
			steps{
				git branch: '2.1.x', url: 'https://github.com/miehhej/spring-boot.git'
			}		}
    	stage('Port Number input') {
    		steps {
    		// input('Do you want to proceed?')
    			script {
    				def port = input(
    					id:				'portnumber',
    					message: 		'Enter Port Number JAVA_APP will listen on, 1000-65535',
    					parameters : [string(	
    						name:'number',
    						defaultValue: 	'8082'
    					)]
    				)    			    	
    				sh "echo $port.number"
    				input('Do you want to proceed?')
    				}
    					}    	}
    	stage("Build") {
        	steps {
				sh "mvn -DskipTests clean install -f ./spring-boot-samples/spring-boot-sample-web-ui/pom.xml"
			}
		}
		stage ('Upload to NEXUS') {
			steps {
				echo "Current workspace is ${env.WORKSPACE}"
				//sh "ls -la ${pwd()}/spring-boot-samples/spring-boot-sample-web-ui/target" 
				script {
					nexusArtifactUploader( 
						credentialsId: NEXUS_CREDENTIAL_ID,
						groupId: 'gr.id', 
						nexusUrl: NEXUS_URL, 
						nexusVersion: NEXUS_VERSION, 
						protocol: NEXUS_PROTOCOL, 
						repository: NEXUS_REPOSITORY, 
						version: BUILD_NUMBER,
						artifacts: [[
							artifactId: 'spring-boot-sample-web-ui', 
							classifier: '', 
							file: ARTIFACTTPATH,
							type: 'jar'
						]]
					)
				}          
			}
		}
        stage ('Deploy to dev') {
        	steps {
        		sh 'cp -f ./spring-boot-samples/spring-boot-sample-web-ui/target/spring-boot-sample-web-ui-2.1.16.BUILD-SNAPSHOT.jar ./ias'
        		dir ('./ias'){
        		sh "ls -la ${pwd()}"
        		sh 'docker build . -t grw:$BUILD_NUMBER'
        	
        		sh 'docker container stop $(docker container ls --all --quiet)'
			//	#	docker container rm $(docker container ls â€“aq)
				script {
        			sh 'docker run -d  -p "${port.number}":8080 --name grw_$BUILD_NUMBER grw:$BUILD_NUMBER'
        		}
        		}
		}	} } }



